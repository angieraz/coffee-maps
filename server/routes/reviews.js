// server/routes/reviews.js
const router = require("express").Router();
const { Review } = require("../models/review");
const verifyToken = require("../middleware/verifyToken"); // ‚Üê –±–µ–∑ {}

router.post("/", verifyToken, async (req, res) => {
  try {
    const { cafeId, rating, comment } = req.body;

    console.log("üì• –ó–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É");
    console.log("–¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:", req.body);
    console.log("req.user:", req.user);

    if (!req.user || !req.user._id) {
      console.log("‚ùå –ù–µ–º–∞—î user._id —É —Ç–æ–∫–µ–Ω—ñ");
      return res.status(400).json({ error: "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–æ–∫–µ–Ω—ñ" });
    }

    if (!cafeId || !rating) {
      console.log("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (cafeId, rating)");
      return res.status(400).json({ error: "–ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è" });
    }

    const newReview = new Review({
      userId: req.user._id,
      cafeId,
      rating,
      comment,
    });

    await newReview.save();
    console.log("‚úÖ –í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
    res.status(201).json({ message: "–í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É" });
  }
});

router.get("/:cafeId", async (req, res) => {
  try {
    const reviews = await Review.find({ cafeId: req.params.cafeId }).populate("userId", "firstName lastName");
    res.status(200).send(reviews);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤:", err);
    res.status(500).send({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏" });
  }
});

router.get("/my", verifyToken, async (req, res) => {
  try {
    const mongoose = require("mongoose");
    const userObjectId = new mongoose.Types.ObjectId(req.user._id);

    const reviews = await Review.find({ userId: userObjectId })
      .populate("cafeId", "name location"); // –¥–æ–¥–∞—î –Ω–∞–∑–≤—É –∫–∞–≤‚Äô—è—Ä–Ω—ñ
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" });
  }
});

router.get("/", async (req, res) => {
  try {
    const reviews = await Review.find()
      .populate("userId", "firstName lastName")
      .populate("cafeId", "name location");
    res.status(200).send(reviews);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤—ñ–¥–≥—É–∫—ñ–≤:", err);
    res.status(500).send({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–≥—É–∫–∏" });
  }
});


module.exports = router;
